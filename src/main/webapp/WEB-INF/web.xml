<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
     
    <!-- 
      chen.kai web.xml配置
     -->
    <!-- 配置项目欢迎页面 -->
    <display-name>msnc</display-name>
	  <welcome-file-list>
	    <welcome-file>index.html</welcome-file>
	    <welcome-file>index.ftl</welcome-file>
	    <welcome-file>index.jsp</welcome-file>
	  </welcome-file-list>
	
	<!-- 配置spring的xml加载 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<!--配置spring 视图监听 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止Spring内存溢出监听器 -->  
    <listener>  
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>  
    </listener> 
    
	<!-- Processes application requests -->
	<servlet>
	    <!-- DispatcherServlet会默认加载WEB-INF/[DispatcherServlet的Servlet名字]-servlet.xml配置文件 -->
		<servlet-name>SpringMVC</servlet-name>
		<!-- 把所有请求交给Spring Web MVC框架处理 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 下面的配置最好直接在一行,且不要有空格,如果输成 "classpath:空格config/applicationContext.xml"-->
            <!-- 将会报错:org.xml.sax.SAXParseException: Content is not allowed in prolog.  -->
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<!-- 1)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)。
        2)它的值必须是一个整数，表示servlet应该被载入的顺序
        2)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
        3)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。
        4)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
        5)当值相同时，容器就会自己选择顺序来加载。 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!--Spring redis 分布式session管理,java代码直接调用request.getSession().setAttribute()会将数据自动存入到redis缓存里面	-->
	<filter>
	    <filter-name>springSessionRepositoryFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <!--  
	    <init-param>  
           <param-name>noMapperUrl</param-name>  
           <param-value>/interface/;/file</param-value>  
       </init-param>  -->
	</filter>
	<filter-mapping>
	    <filter-name>springSessionRepositoryFilter</filter-name>
	    <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>ERROR</dispatcher>
	</filter-mapping> 

     <!-- session配置超时设置，此处也是redis缓存的过期时间-->
    <session-config>
        <session-timeout>60</session-timeout>
    </session-config>
	<!--  配置Spring框架自身的拦截器 解决乱码问题  --> 
	     <filter>
	        <filter-name>SpringCharacterEncodingFilter</filter-name>
	        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	        <init-param>
	            <param-name>encoding</param-name>
	            <param-value>UTF-8</param-value>
	        </init-param>
	        <init-param>
	            <param-name>forceEncoding</param-name>
	            <param-value>true</param-value>
	        </init-param>
	    </filter> 
	    <filter-mapping>
	        <filter-name>SpringCharacterEncodingFilter</filter-name>
	        <url-pattern>/*</url-pattern>
	    </filter-mapping>

       <!-- http POST请求报文，拦截解密 -->
         <filter>
	        <filter-name>HttpFilter</filter-name>
	        <filter-class>com.cn.common.interceptor.HttpFilter</filter-class>
	        <init-param>  
		        <param-name>encoding</param-name>  
		        <param-value>utf-8</param-value>  
    		</init-param>  
	    </filter> 
	    <!-- 只拦截/interface/下面的controller -->
	    <filter-mapping>
	        <filter-name>HttpFilter</filter-name>
	        <url-pattern>/interface/*</url-pattern>
	    </filter-mapping>
  <!-- 登陆拦截 -->

    <filter>
	    <filter-name>IdentityFilter</filter-name>
	    <filter-class>com.cn.common.interceptor.LoginingSessionFilter</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>utf-8</param-value>
	    </init-param>
  </filter>
  <filter-mapping>
	    <filter-name>IdentityFilter</filter-name>
	    <url-pattern>/manager/*</url-pattern>
  </filter-mapping>  
	    
	    
	  <!-- 日志记录 -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!-- 本地邮件模版地址监听器 -->
    <listener>
        <listener-class>com.cn.common.queue.listener.ServletListener</listener-class>
    </listener>
	    <!-- 错误请求配置 -->
	    <!-- <exception-type>java.lang.NullPointerException</exception-type>
	    <error-page>
        <error-code>500</error-code>
		
		        <location>/WEB-INF/views/error/errorPage.jsp</location>
		 </error-page>
		  -->  		 
</web-app>
